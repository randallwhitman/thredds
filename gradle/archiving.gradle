allprojects {  // Doesn't apply any plugins: safe to run closure on all projects.
    tasks.withType(Jar).all {   // Applies to Jar, War, Ear and ShadowJar tasks.
        // Fails the build when an attempt is made to add a duplicate entry to an archive.
        duplicatesStrategy = 'fail'

        manifest {
            // Subprojects have not yet been configured, but they may want to reassign these attributes.
            // So, we're going to delay evaluation by using lazy GStrings: http://goo.gl/zwWnPh
            // Evaluation will happen when these strings are read, which should first occur during the UP-TO-DATE
            // check of the execution phase.
            attributes 'Implementation-Title': "${-> project.title}",
                    'Implementation-Version': "${-> project.version}",
                    'Implementation-Vendor-Id': "${-> project.group}",
                    'Implementation-Vendor': "${-> project.vendor}",
                    'Implementation-URL': "${-> project.url}",
                    'Created-By': "Gradle $gradle.gradleVersion",
                    'Build-Jdk': System.properties['java.version'],
                    'Built-By': System.properties['user.name']
        }

        doFirst {
            // We cannot add this attribute during the configuration phase because it'll cause the jar task to never
            // be UP-TO-DATE: http://goo.gl/kbVWXR. Adding it during the execution phase removes it as an input to
            // Gradle's incremental build machinery.
            manifest.attributes 'Built-On': project.buildTimestamp  // Defined in root project.
        }
    }

    // We could use "if (pluginManager.hasPlugin('war'))" here, but org.gradle.api.DomainObjectCollection.all()
    // has the lovely effect of executing the given closure against all current and *future* War tasks added to the
    // project. So, we don't have to think too hard about configuration order.
    tasks.withType(War).all {
        project.with {  // We're configuring the project, not the task.
            // When the "war" plugin is applied to a project, it removes "jar" as a default artifact
            // (see org.gradle.api.plugins.WarPlugin.apply() and
            // org.gradle.api.internal.plugins.DefaultArtifactPublicationSet.addCandidate()).
            // Here, we're restoring the jar by adding it as an *explicit* artifact.
            artifacts {
                archives jar
            }

            // This is the classifier that maven-war-plugin gives its comparable jar when attachClasses is true.
            // Currently, threddsIso (and others?) depends on this jar.
            jar.classifier = 'classes'
        }
    }
}
