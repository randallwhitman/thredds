Making a release for CDM/TDS using Gradle
Last edited 2015/05/17

{release.minor} refers to the full, 3-part version, e.g. "4.6.1"
{release.major} refers to the truncated, 2-part version, e.g. "4.6"

1. Prepare ncWMS and threddsIso
   - Detailed instructions can be found in threddsIso/docs/internal/release.txt and ncwms/docs/internal/release.txt.
   - The instructions for the two are very similar.

2. Ensure that there are no uncommitted changes.

3. Pull all of the latest changes from upstream.

4. Make sure the project's version is correct for the release. It shouldn't contain "SNAPSHOT".

5. Remove any dependencies on SNAPSHOT libraries. For example, the version of "uk.ac.rdg.resc:ncwms" might
change from "1.2.tds.4.6.1-SNAPSHOT" to "1.2.tds.4.6.1", assuming that you prepared ncWMS in step 1.

6. Publish the artifacts to Nexus.
   - gradlew clean publish
   - Check artifacts at http://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/

7. On robin, prepare the FTP directory for the new version of TDS and TDM (best to do from SSH)
  - cd /web/ftp/pub/thredds/{release.major}
  - mkdir {release.minor}
  - move /web/ftp/pub/thredds/{release.major}/current to point to /web/ftp/pub/thredds/{release.major}/{release.minor}
     rm current   (If it exists)
     ln -s {release.minor} current

8. Copy over the TDS war and its security hashes from Nexus, renaming them in the process.
     * wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/tds/{release.minor}/tds-{release.minor}.war -O {release.minor}/thredds.war
     * wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/tds/{release.minor}/tds-{release.minor}.war.md5 -O {release.minor}/thredds.war.md5
     * wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/tds/{release.minor}/tds-{release.minor}.war.sha1 -O {release.minor}/thredds.war.sha1

9. Copy over the TDM fat jar and its security hashes from Nexus, renaming them in the process.
   When renaming, "tdmFat" should become "tdm".
     * wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/tdmFat/{release.minor}/tdmFat-{release.minor}.jar -O {release.minor}/tdm-{release.major}.jar
     * wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/tdmFat/{release.minor}/tdmFat-{release.minor}.jar.sha1 -O {release.minor}/tdm-{release.major}.jar.sha1
     * wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/tdmFat/{release.minor}/tdmFat-{release.minor}.jar.md5 -O {release.minor}/tdm-{release.major}.jar.md5

10. Change permissions of the files you just copied.
    - cd /web/ftp/pub/thredds/{release.major}/{release.minor}
    - chmod 775 .
    - chmod 664 *

11. Copy over ncIdv, netcdfAll, toolsUI and their security hashes from Nexus
    - cd /web/ftp/pub/netcdf-java/v{release.major}
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/ncIdv/{release.minor}/ncIdv-{release.minor}.jar
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/ncIdv/{release.minor}/ncIdv-{release.minor}.jar.md5
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/ncIdv/{release.minor}/ncIdv-{release.minor}.jar.sha1
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/netcdfAll/{release.minor}/netcdfAll-{release.minor}.jar
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/netcdfAll/{release.minor}/netcdfAll-{release.minor}.jar.md5
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/netcdfAll/{release.minor}/netcdfAll-{release.minor}.jar.sha1
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/toolsUI/{release.minor}/toolsUI-{release.minor}.jar
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/toolsUI/{release.minor}/toolsUI-{release.minor}.jar.md5
    - wget https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/toolsUI/{release.minor}/toolsUI-{release.minor}.jar.sha1

12. Remove symlinks to old versions and create ones to new versions
    - cd /web/ftp/pub/netcdf-java/v{release.major}
    - rm toolsUI-{release.major}.jar netcdfAll-{release.major}.jar ncIdv-{release.major}.jar
    - ln -s toolsUI-{release.minor}.jar toolsUI-{release.major}.jar
    - ln -s netcdfAll-{release.minor}.jar netcdfAll-{release.major}.jar
    - ln -s ncIdv-{release.minor}.jar ncIdv-{release.major}.jar

13. Change permissions of the files you just copied.
    - cd /web/ftp/pub/netcdf-java/v{release.major}
    - chmod 775 .
    - chmod 664 *

14. Release Web Start to robin:/content/software/thredds/v{release.major}/netcdf-java/webstart
    - Make sure that you have the correct gradle.properties (see Christian for info). In particular, you'll need the
      'keystore', 'keystoreAlias', 'keystorePassword', 'webdir', and 'ftpdir' properties defined.
    - Rename old directories
      * cd /content/software/thredds/v{release.major}/netcdf-java/
      * mv webstart webstartOld
    - Update /thredds/ui/netCDFtools.jnlp and /thredds/ui/netCDFtoolsExtraJars.jnlp as needed.
    - Test webstart locally. There are notes above ui/build.gradle/releaseWebstart() about how to do that.
    - Perform release
      * gradlew :ui:clean :ui:releaseWebstart
    - If there were no errors and the new Web Start looks good, delete the old stuff.
      * rm -r webstartOld

15. Release Javadoc to robin:/content/software/thredds/v{release.major}/netcdf-java/javadoc and javadocAll
    - Rename old directories
      * cd /content/software/thredds/v{release.major}/netcdf-java/
      * mv javadoc javadocOld
      * mv javadocAll javadocAllOld
    - Perform release
      * gradlew :cdm:clean :cdm:releaseDocs
      * gradlew :ui:clean :ui:releaseDocs
    - If there were no errors and the new Javadoc looks good, delete the old stuff.
      * rm -r javadocOld
      * rm -r javadocAllOld

16. Change permissions of the files you just copied.
    - cd /content/software/thredds/v{release.major}/netcdf-java/
    - find webstart -type d -exec chmod 775 {} \;
    - find webstart -type f -exec chmod 664 {} \;
    - find javadoc -type d -exec chmod 775 {} \;
    - find javadoc -type f -exec chmod 664 {} \;
    - find javadocAll -type d -exec chmod 775 {} \;
    - find javadocAll -type f -exec chmod 664 {} \;

17. Update Unidata download page(s)
    - check http://www.unidata.ucar.edu/downloads/thredds/index.jsp
      * modify robin:/content/downloads/thredds/toc.xml as needed
    - check http://www.unidata.ucar.edu/downloads/netcdf/netcdf-java-4/index.jsp
      * modify robin:/content/downloads/netcdf/netcdf-java-4/toc.xml as needed

18. Commit the changes you've made.
    - At the very least, project.version in the root build script should have been modified.
    - Make the commit message something like "Release {release.minor}".

19. Create a tag for the release: "v{release.minor}".

20. Prepare for next round of development.
    - Update the project version. Increment it and add the "-SNAPSHOT" suffix.
      * For example, if {release.minor}="4.6.1", the next version will be "4.6.2-SNAPSHOT".
    - Commit the change.
      * The commit message should be something like "Starting work on 4.6.2-SNAPSHOT".

21. Push the commits upstream.
    - Be sure to include the tag you created.
      * In IntelliJ, check the "Push Tags" box in the "Push Commits" dialog.

22. On Robin, edit /web/content/software/thredds/latest.xml to reflect the correct
    {release.minor} version for stable and development. This file is read by all
    TDS > v4.6 to make log enteries regarding current stable and development versions
    to give users a heads up of the need update.

NOTE 1: In the Maven build, the maven-release-plugin roughly handled steps 2-6 and 18-21 for us. In the future, we
should investigate similar Gradle plugins that offer the same functionality.

NOTE 2: In the future, we should be performing many (all?) of these steps from Jenkins, not our local machine.

Note 3: The latest.xml doc in step 22 is very simple and could probably be updated
        automatically during the release process.
